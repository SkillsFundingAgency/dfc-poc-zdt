parameters:
  Environment: 'Unknown'
  ArmTemplateRoot: ''
  AzureSubscription: ''
  ResourceGroup: ''
  EnvironmentTag: ''
  ParentBusinessTag: ''
  ServiceOfferingTag: ''
  AppServicePrefix: ''
  WebAppPackage: ''
  WebSlotUrl: ''
  FunctionAppPackage: ''
  FunctionSlotUrl: ''

jobs:
# Deploy ARM template
- deployment: AzureResources_${{ parameters.Environment }}
  pool:
    name: 'NCS - CI and CD'
  environment: ${{ parameters.Environment }}
  strategy:
    runOnce:
      deploy:
        steps:
        # ARM template
        - template: AzureDevOpsTemplates/Deploy/StepTemplates/dfc-arm-deploy.yml@dfc-devops
          parameters:
            ArmTemplateRoot: "${{ parameters.ArmTemplateRoot }}"
            AzureSubscription: "${{ parameters.AzureSubscription }}"
            ResourceGroup: "${{ parameters.ResourceGroup }}"
            EnvironmentTag: "${{ parameters.EnvironmentTag }}"
            ParentBusinessTag: "${{ parameters.ParentBusinessTag }}"
            ServiceOfferingTag: "${{ parameters.ServiceOfferingTag }}"

# Deploy web app
- deployment: WebApp_${{ parameters.Environment }}
  pool:
    name: 'NCS - CI and CD'
  dependsOn: AzureResources_${{ parameters.Environment }}
  environment: ${{ parameters.Environment }}
  strategy:
    runOnce:
      deploy:
        steps:
        # Deploy app to slot template
        - template: StepTemplates/dfc-appservice-deploy-slot.yml
          parameters:
            AzureSubscription: "${{ parameters.AzureSubscription }}"
            ResourceGroup: "${{ parameters.ResourceGroup }}"
            AppServiceName: "${{ parameters.AppServicePrefix }}-as"
            Package: "${{ parameters.WebAppPackage }}"

        # Test web app
        - task: PowerShell@2
          name: TestWebApp
          displayName: "Test ${{ parameters.AppServicePrefix }}-as"
          inputs:
            targetType: 'inline'
            script: |
              $loop = 0
              do {
                  $request = Invoke-WebRequest -Method Get -Uri ${{ parameters.WebSlotUrl }}
                  If ($request.StatusCode -eq 200) { break }
                  write-verbose "Attepmpt $loop failed - result code $request.StatusCode"
                  $loop += 1
                  start-sleep 15
              } while ($loop -lt 10)
              If ($request.StatusCode -ne 200) { exit 1 }

# Deploy function app
- deployment: FunctionApp_${{ parameters.Environment }}
  pool:
    name: 'NCS - CI and CD'
  dependsOn: AzureResources_${{ parameters.Environment }}
  environment: ${{ parameters.Environment }}
  strategy:
    runOnce:
      deploy:
        steps:
        # Deploy app to slot template
        - template: StepTemplates/dfc-appservice-deploy-slot.yml
          parameters:
            AzureSubscription: "${{ parameters.AzureSubscription }}"
            ResourceGroup: "${{ parameters.ResourceGroup }}"
            AppServiceName: "${{ parameters.AppServicePrefix }}-fa"
            Package: "${{ parameters.FunctionAppPackage }}"

        # Test function app (dummy)
        - powershell: Write-Output "Tests would go here"

# Swap on success
- deployment: SwapToProduction_${{ parameters.Environment }}
  pool:
    name: 'NCS - CI and CD'
  dependsOn:
  - WebApp_${{ parameters.Environment }}
  - FunctionApp_${{ parameters.Environment }}
  condition: succeeded()
  environment: ${{ parameters.Environment }}
  strategy:
    runOnce:
      deploy:
        steps:
        # Swap function app
        - template: StepTemplates/dfc-appservice-swap-slot.yml
          parameters:
            AzureSubscription: "${{ parameters.AzureSubscription }}"
            ResourceGroup: "${{ parameters.ResourceGroup }}"
            AppServiceName: "${{ parameters.AppServicePrefix }}-fa"

        # Swap web app
        - template: StepTemplates/dfc-appservice-swap-slot.yml
          parameters:
            AzureSubscription: "${{ parameters.AzureSubscription }}"
            ResourceGroup: "${{ parameters.ResourceGroup }}"
            AppServiceName: "${{ parameters.AppServicePrefix }}-as"

# Cleanup on failure
- deployment: CleanupFailure_${{ parameters.Environment }}
  pool:
    name: 'NCS - CI and CD'
  dependsOn:
  - WebApp_${{ parameters.Environment }}
  - FunctionApp_${{ parameters.Environment }}
  condition: failed()
  environment: ${{ parameters.Environment }}
  strategy:
    runOnce:
      deploy:
        steps:
        # Stop function app staging slot
        - task: AzureAppServiceManage@0
          displayName: "Stop function app staging slot"
          inputs:
            azureSubscription: "${{ parameters.AzureSubscription }}"
            Action: 'Stop Azure App Service'
            WebAppName: "${{ parameters.AppServicePrefix }}-fa"
            SpecifySlotOrASE: true
            ResourceGroupName: "${{ parameters.ResourceGroup }}"
            Slot: staging

        # Stop web app staging slot
        - task: AzureAppServiceManage@0
          displayName: "Stop web app staging slot"
          inputs:
            azureSubscription: "${{ parameters.AzureSubscription }}"
            Action: 'Stop Azure App Service'
            WebAppName: "${{ parameters.AppServicePrefix }}-as"
            SpecifySlotOrASE: true
            ResourceGroupName: "${{ parameters.ResourceGroup }}"
            Slot: staging
